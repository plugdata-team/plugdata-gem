#N canvas 712 348 578 574 10;
#X text 75 101 1- select the backend;
#X obj 232 253 s \$1-ctl;
#X msg 261 212 record 1;
#X text 75 211 3- start sending out stream;
#X text 89 47 recordV4L2 - output pixes with the video4linux2 framework;
#X text 89 57 =========================================================;
#X msg 261 102 codec v4l2;
#X msg 261 162 file /dev/video1;
#X text 75 161 2- select a V4L2 output device;
#X msg 135 369 https://github.com/umlaeute/v4l2loopback;
#N canvas 0 0 204 175 URL 0;
#X obj 37 37 inlet;
#X obj 37 60 symbol;
#X msg 37 83 browse \$1;
#X obj 37 106 pdcontrol;
#X connect 0 0 1 0;
#X connect 1 0 2 0;
#X connect 2 0 3 0;
#X restore 135 392 pd URL;
#X text 86 315 This is mostly useful for sharing pix-streams between applications using "virtual cameras" \, e.g. via the v4l2loopback kernel module:;
#X text 83 443 While writing to a v4l2 OUTPUT device \, you can read the video-frames from the corresponding CAPTURE device with a different application (e.g. a video-encoder \, or your favourite teleconferencing software);
#X connect 2 0 1 0;
#X connect 6 0 1 0;
#X connect 7 0 1 0;
#X connect 9 0 10 0;
