#N canvas 6 61 635 372 10;
#X declare -lib Gem;
#X text 442 8 GEM object;
#X obj 8 245 cnv 15 430 80 empty empty empty 20 12 0 14 #e0e0e0 #404040 0;
#X text 39 248 Inlets:;
#X text 38 295 Outlets:;
#X obj 8 206 cnv 15 430 30 empty empty empty 20 12 0 14 #bcbcbc #404040 0;
#X text 17 205 Arguments:;
#X obj 7 76 cnv 15 430 125 empty empty empty 20 12 0 14 #e0e0e0 #404040 0;
#X obj 449 77 cnv 15 170 250 empty empty empty 20 12 0 14 #dce4fc #404040 0;
#X text 453 60 Example:;
#X obj 514 254 cnv 15 100 60 empty empty empty 20 12 0 14 #bcbcbc #404040 0;
#X obj 450 158 cnv 15 160 60 empty empty empty 20 12 0 14 #14e814 #404040 0;
#X obj 451 84 gemhead;
#X text 71 31 Class: pix object;
#X text 63 216 <none>;
#X text 56 308 Outlet 1: gemlist;
#X text 63 262 Inlet 1: gemlist;
#X obj 468 166 tgl 15 1 empty empty empty 0 -6 0 8 #fcfcfc #000000 #000000 1 1;
#X text 63 275 Inlet 1: 1|0: turn conversion on/off (default:1);
#X text 62 339 see also:;
#X obj 248 338 pix_grey;
#X obj 451 196 pix_yuv;
#X text 13 118 While the RGBA-format offers you the possibility to add alpha-blending on a per-pixel-basis \, the YUV-format needs far less memory and can be processed faster. You can use [pix_yuv] to convert images of any format into YUV-space. If your image already is in YUV-space \, this will do nothing.;
#X text 15 77 Description: convert the colorspace of an image to YUV;
#X text 50 12 Synopsis: [pix_yuv];
#X obj 155 338 pix_rgba;
#X text 15 101 Images can be stored in various formats/color-spaces.;
#N canvas 484 243 450 300 META 0;
#X obj 10 25 declare -lib Gem;
#X text 10 45 DESCRIPTION convert the colorspace of an image to YUV;
#X text 10 65 KEYWORDS Gem pix image;
#X text 20 85 INLET_0 gemlist bool;
#X text 20 105 OUTLET_0 gemlist;
#X text 10 125 AUTHOR IOhannes m zm√∂lnig;
#X text 10 145 LICENSE GPL v2;
#X restore 514 8 pd META;
#X obj 451 233 _pix2rectangle 3;
#X obj 451 113 pix_test;
#X obj 521 261 _gemwin;
#X connect 11 0 28 0;
#X connect 16 0 20 0;
#X connect 20 0 27 0;
#X connect 28 0 20 0;
