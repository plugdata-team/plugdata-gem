#N canvas 6 61 624 377 10;
#X declare -lib Gem;
#X text 452 8 GEM object;
#X obj 8 245 cnv 15 430 120 empty empty empty 20 12 0 14 #e0e0e0 #404040 0;
#X text 39 248 Inlets:;
#X text 38 335 Outlets:;
#X obj 8 206 cnv 15 430 30 empty empty empty 20 12 0 14 #bcbcbc #404040 0;
#X text 17 205 Arguments:;
#X obj 7 76 cnv 15 430 125 empty empty empty 20 12 0 14 #e0e0e0 #404040 0;
#X obj 449 77 cnv 15 170 250 empty empty empty 20 12 0 14 #dce4fc #404040 0;
#X text 453 60 Example:;
#X obj 514 254 cnv 15 100 60 empty empty empty 20 12 0 14 #bcbcbc #404040 0;
#X obj 450 148 cnv 15 160 70 empty empty empty 20 12 0 14 #14e814 #404040 0;
#X obj 451 84 gemhead;
#X text 71 31 Class: pix object;
#X text 63 216 <none>;
#X text 8 348 Outlet 1: gemlist;
#X text 13 262 Inlet 1: gemlist;
#X obj 451 233 _pix2rectangle 3;
#X text 50 12 Synopsis: [pix_rectangle];
#X text 28 76 Description: draw a rectangle into a pix;
#X msg 537 175 1 0 0;
#X obj 451 197 pix_rectangle;
#X text 13 275 Inlet 2: list : 4 floats defining the 4 corners of the rectangle: <x1> <y1> <x2> <y2>;
#X msg 494 151 40 10 100 200;
#X text 13 305 Inlet 3: list : 3(RGB) or 4(RGBA) float-values defining the color of the rectangle (default: 1 1 1 1);
#X text 21 111 pix_rectangle renders a rectangle onto a pix-buffer. This means that you have to have an image already loaded to render into. Set the position and size with the two corners of the rectangle.;
#N canvas 484 243 450 300 META 0;
#X obj 10 25 declare -lib Gem;
#X text 10 45 DESCRIPTION draw a rectangle into a pix;
#X text 10 65 KEYWORDS Gem pix image;
#X text 20 85 INLET_0 gemlist;
#X text 20 105 INLET_1 list;
#X text 20 125 INLET_2 list;
#X text 20 145 OUTLET_0 gemlist;
#X text 10 165 AUTHOR IOhannes m zm√∂lnig;
#X text 10 185 LICENSE GPL v2;
#X restore 518 8 pd META;
#X obj 519 259 _gemwin;
#X obj 451 113 pix_noise;
#X connect 11 0 27 0;
#X connect 19 0 20 2;
#X connect 20 0 16 0;
#X connect 22 0 20 1;
#X connect 27 0 20 0;
